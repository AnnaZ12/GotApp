{"version":3,"sources":["components/errorMessage/error.jpg","components/header/index.js","components/header/header.js","services/gotService.js","components/spinner/index.js","components/spinner/spinner.js","components/errorMessage/index.js","components/errorMessage/errorMessage.js","components/randomChar/randomChar.js","components/randomChar/index.js","components/itemList/index.js","components/itemList/itemList.js","components/itemDetails/itemDetails.js","components/itemDetails/index.js","components/rowBlock/index.js","components/rowBlock/rowBlock.js","components/pages/characterPage.js","components/pages/booksPage.js","components/pages/housesPage.js","components/pages/booksItem.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","react_router_dom","to","GotService","_this","this","Object","classCallCheck","getResource","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","res","wrap","_context","prev","next","fetch","concat","_apiBase","sent","ok","Error","status","json","abrupt","stop","_x","apply","arguments","getAllBooks","_callee2","_context2","map","_transformBook","getBook","_ref3","_callee3","id","book","_context3","_x2","getAllCharacters","_callee4","_context4","_transformCharacter","getCharacter","_ref5","_callee5","character","_context5","_x3","getAllHouses","_callee6","_context6","_transformHouse","getHouse","_ref7","_callee7","house","_context7","_x4","_extractId","item","match","char","name","isSet","gender","born","died","culture","region","words","titles","ancestralWeapons","numberOfPages","publisher","released","data","Spinner","ErrorMessage","Fragment","src","img","alt","RandomChar","gotService","state","loading","error","onCharLoaded","setState","onError","err","updateChar","Math","floor","random","then","catch","timerId","setInterval","props","interval","clearInterval","_this$state","errorMessage","components_errorMessage","spinner","components_spinner","content","randomChar_View","Component","defaultProps","View","ItemList","itemList","_this2","getData","arr","_this3","label","renderItem","key","onClick","onItemSelected","items","renderItems","Field","field","ItemDetails","updateItem","prevProps","itemId","_this$props","React","Children","children","child","cloneElement","RowBlock","left","right","Row","Col","md","CharacterPage","selectedChar","components_itemList","itemDetails","components_itemDetails","itemDetails_Field","components_rowBlock","BooksPage","_Component","_getPrototypeOf2","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","selectedBook","inherits","createClass","value","history","push","withRouter","HousesPage","selectedHouse","BooksItem","bookId","App","showRandomChar","toggleRandomChar","console","log","components_randomChar","Container","components_header","lg","size","offset","react_router","path","component","exact","render","params","booksItem_BooksItem","ReactDOM","components_app","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sYCEzBC,ECKA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,uBAIJL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,gBAAT,eAEJL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,WAEJL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,WAAT,6CCvBCC,aAGjB,SAAAA,IAAc,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAKdG,YALc,eAAAC,EAAAH,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KAKA,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAJ,EAAAb,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEQC,MAAK,GAAAC,OAAIjB,EAAKkB,UAATD,OAAoBP,IAFjC,WAEJC,EAFIE,EAAAM,MAKDC,GALC,CAAAP,EAAAE,KAAA,cAMF,IAAIM,MAAM,mBAAAJ,OAAmBP,GAAnB,cAAAO,OACAN,EAAIW,SAPZ,cAAAT,EAAAE,KAAA,EASGJ,EAAIY,OATP,cAAAV,EAAAW,OAAA,SAAAX,EAAAM,MAAA,wBAAAN,EAAAY,SAAAhB,EAAAR,SALA,gBAAAyB,GAAA,OAAArB,EAAAsB,MAAA1B,KAAA2B,YAAA,GAAA3B,KAkBd4B,YAlBc3B,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KAkBA,SAAAsB,IAAA,IAAAnB,EAAA,OAAAJ,EAAAb,EAAAkB,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EACQf,EAAKI,YAAL,WADR,cACJO,EADIoB,EAAAZ,KAAAY,EAAAP,OAAA,SAEHb,EAAIqB,IAAIhC,EAAKiC,iBAFV,wBAAAF,EAAAN,SAAAK,EAAA7B,SAlBAA,KAuBdiC,QAvBc,eAAAC,EAAAjC,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KAuBJ,SAAA4B,EAAOC,GAAP,IAAAC,EAAA,OAAA/B,EAAAb,EAAAkB,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACaf,EAAKI,YAAL,UAAAa,OAA2BoB,EAA3B,MADb,cACAC,EADAC,EAAApB,KAAAoB,EAAAf,OAAA,SAECxB,EAAKiC,eAAeK,IAFrB,wBAAAC,EAAAd,SAAAW,EAAAnC,SAvBI,gBAAAuC,GAAA,OAAAL,EAAAR,MAAA1B,KAAA2B,YAAA,GAAA3B,KA4BdwC,iBA5BcvC,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KA4BK,SAAAkC,IAAA,IAAA/B,EAAA,OAAAJ,EAAAb,EAAAkB,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EACGf,EAAKI,YAAL,kCADH,cACTO,EADSgC,EAAAxB,KAAAwB,EAAAnB,OAAA,SAERb,EAAIqB,IAAIhC,EAAK4C,sBAFL,wBAAAD,EAAAlB,SAAAiB,EAAAzC,SA5BLA,KAiCd4C,aAjCc,eAAAC,EAAA5C,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KAiCC,SAAAuC,EAAOV,GAAP,IAAAW,EAAA,OAAAzC,EAAAb,EAAAkB,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EACaf,EAAKI,YAAL,eAAAa,OAAgCoB,IAD7C,cACLW,EADKC,EAAA9B,KAAA8B,EAAAzB,OAAA,SAEJxB,EAAK4C,oBAAoBI,IAFrB,wBAAAC,EAAAxB,SAAAsB,EAAA9C,SAjCD,gBAAAiD,GAAA,OAAAJ,EAAAnB,MAAA1B,KAAA2B,YAAA,GAAA3B,KAsCdkD,aAtCcjD,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KAsCC,SAAA4C,IAAA,IAAAzC,EAAA,OAAAJ,EAAAb,EAAAkB,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACOf,EAAKI,YAAL,YADP,cACLO,EADK0C,EAAAlC,KAAAkC,EAAA7B,OAAA,SAEJb,EAAIqB,IAAIhC,EAAKsD,kBAFT,wBAAAD,EAAA5B,SAAA2B,EAAAnD,SAtCDA,KA2CdsD,SA3Cc,eAAAC,EAAAtD,OAAAI,EAAA,EAAAJ,CAAAK,EAAAb,EAAAc,KA2CH,SAAAiD,EAAOpB,GAAP,IAAAqB,EAAA,OAAAnD,EAAAb,EAAAkB,KAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cAAA4C,EAAA5C,KAAA,EACaf,EAAKI,YAAL,WAAAa,OAA4BoB,EAA5B,MADb,cACDqB,EADCC,EAAAxC,KAAAwC,EAAAnC,OAAA,SAEAxB,EAAKsD,gBAAgBI,IAFrB,wBAAAC,EAAAlC,SAAAgC,EAAAxD,SA3CG,gBAAA2D,GAAA,OAAAJ,EAAA7B,MAAA1B,KAAA2B,YAAA,GAAA3B,KA0Dd4D,WAAa,SAACC,GAEV,OAAOA,EAAKpD,IAAIqD,MADC,eACe,IA5DtB9D,KA+Dd2C,oBAAsB,SAACoB,GACnB,MAAO,CACH3B,GAAIrC,EAAK6D,WAAWG,GACpBC,KAAMjE,EAAKkE,MAAMF,EAAKC,MACtBE,OAAQnE,EAAKkE,MAAMF,EAAKG,QACxBC,KAAMpE,EAAKkE,MAAMF,EAAKI,MACtBC,KAAMrE,EAAKkE,MAAMF,EAAKK,MACtBC,QAAStE,EAAKkE,MAAMF,EAAKM,WAtEnBrE,KA0EdqD,gBAAkB,SAACI,GACf,MAAO,CACHrB,GAAIrC,EAAK6D,WAAWH,GACpBO,KAAMjE,EAAKkE,MAAMR,EAAMO,MACvBM,OAAQvE,EAAKkE,MAAMR,EAAMa,QACzBC,MAAOxE,EAAKkE,MAAMR,EAAMc,OACxBC,OAAQzE,EAAKkE,MAAMR,EAAMe,QACzBC,iBAAkB1E,EAAKkE,MAAMR,EAAMgB,oBAjF7BzE,KAqFdgC,eAAiB,SAACK,GACd,MAAO,CACHD,GAAIrC,EAAK6D,WAAWvB,GACpB2B,KAAMjE,EAAKkE,MAAM5B,EAAK2B,MACtBU,cAAe3E,EAAKkE,MAAM5B,EAAKqC,eAC/BC,UAAW5E,EAAKkE,MAAM5B,EAAKsC,WAC3BC,SAAU7E,EAAKkE,MAAM5B,EAAKuC,YA1F9B5E,KAAKiB,SAAW,0FAgDd4D,GACF,OAAIA,GAGO,sBCvDJC,SCEC,WACZ,OACItF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,yCCNvJqF,ECIM,WACjB,OACIvF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuF,SAAA,KACIxF,EAAAC,EAAAC,cAAA,OAAKuF,IAAKC,IAAKC,IAAI,UACnB3F,EAAAC,EAAAC,cAAA,sCCDS0F,6MAEjBC,WAAa,IAAIA,IAEjBC,MAAQ,CACJvB,KAAM,GACNwB,SAAS,EACTC,OAAO,KAgBXC,aAAe,SAAC1B,GACZhE,EAAK2F,SAAS,CACV3B,OACAwB,SAAS,OAKjBI,QAAU,SAACC,GACP7F,EAAK2F,SAAS,CACVF,OAAO,EACPD,SAAS,OAKjBM,WAAa,WAET,IAAMzD,EAAK0D,KAAKC,MAAoB,IAAdD,KAAKE,SAAe,IAE1CjG,EAAKsF,WAAWzC,aAAaR,GACxB6D,KAAKlG,EAAK0F,cACVS,MAAMnG,EAAK4F,6FAjChB3F,KAAK6F,aACL7F,KAAKmG,QAAUC,YAAYpG,KAAK6F,WAAY7F,KAAKqG,MAAMC,yDAMvDC,cAAcvG,KAAKmG,0CA6Bd,IAAAK,EAC4BxG,KAAKsF,MAA9BvB,EADHyC,EACGzC,KAAMwB,EADTiB,EACSjB,QAASC,EADlBgB,EACkBhB,MAEjBiB,EAAejB,EAAQhG,EAAAC,EAAAC,cAACgH,EAAD,MAAkB,KACzCC,EAAUpB,EAAU/F,EAAAC,EAAAC,cAACkH,EAAD,MAAa,KACjCC,EAAYtB,GAAWC,EAA+B,KAAtBhG,EAAAC,EAAAC,cAACoH,EAAD,CAAM/C,KAAMA,IAGlD,OACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACV8G,EACAE,EACAE,UA5DuBE,aAoExC3B,EAAW4B,aAAe,CACtBV,SAAU,MAiBd,IAAMW,EAAO,SAAA7G,GAAY,IAAV2D,EAAU3D,EAAV2D,KACJC,EAAqCD,EAArCC,KAAME,EAA+BH,EAA/BG,OAAQC,EAAuBJ,EAAvBI,KAAMC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,QACjC,OACI7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuF,SAAA,KACIxF,EAAAC,EAAAC,cAAA,+BAAuBsE,GACvBxE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kDACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,WACAH,EAAAC,EAAAC,cAAA,YAAOwE,IAEX1E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kDACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,SACAH,EAAAC,EAAAC,cAAA,YAAOyE,IAEX3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kDACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,SACAH,EAAAC,EAAAC,cAAA,YAAO0E,IAEX5E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kDACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,YACAH,EAAAC,EAAAC,cAAA,YAAO2E,OChHZe,ICAA8B,oNCKX5B,MAAQ,CACJ6B,SAAU,yFAKM,IAAAC,EAAApH,MAIhBqH,EAHkBrH,KAAKqG,MAAhBgB,WAIFpB,KAAM,SAACkB,GACJC,EAAK1B,SAAS,CACVyB,mDAMJG,GAAK,IAAAC,EAAAvH,KACb,OAAOsH,EAAIvF,IAAI,SAAC8B,GAAS,IACdzB,EAAMyB,EAANzB,GACDoF,EAAQD,EAAKlB,MAAMoB,WAAW5D,GAEpC,OACIrE,EAAAC,EAAAC,cAAA,MACIgI,IAAKtF,EACLzC,UAAU,kBACVgI,QAAU,kBAAMJ,EAAKlB,MAAMuB,eAAexF,KACzCoF,sCAMR,IACEL,EAAYnH,KAAKsF,MAAjB6B,SAEP,IAAKA,EACD,OAAO3H,EAAAC,EAAAC,cAACkH,EAAD,MAGX,IAAMiB,EAAQ7H,KAAK8H,YAAYX,GAG/B,OACI3H,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBACTkI,UAjDqBd,cCAhCgB,SAAQ,SAAA3H,GAA0B,IAAxByD,EAAwBzD,EAAxByD,KAAMmE,EAAkB5H,EAAlB4H,MAAOR,EAAWpH,EAAXoH,MAEzB,OACIhI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kDACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQ6H,GACxBhI,EAAAC,EAAAC,cAAA,YAAOmE,EAAKmE,OCTTC,6MDoBX3C,MAAQ,CACJzB,KAAM,yFAKN7D,KAAKkI,wDAIUC,GAEXnI,KAAKqG,MAAM+B,SAAWD,EAAUC,QAEhCpI,KAAKkI,kDAKA,IAAAd,EAAApH,KAAAqI,EACiBrI,KAAKqG,MAAxB+B,EADEC,EACFD,OAAQf,EADNgB,EACMhB,QACVe,GAILf,EAAQe,GACHnC,KAAK,SAACpC,GACHuD,EAAK1B,SAAS,CAAC7B,4CAMvB,IAAK7D,KAAKsF,MAAMzB,KACZ,OAAOrE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,kCAHN,IAKEkE,EAAQ7D,KAAKsF,MAAbzB,KACAG,EAAQH,EAARG,KAEP,OACIxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,UAAKsE,GACLxE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAEN2I,IAAMC,SAASxG,IAAI/B,KAAKqG,MAAMmC,SAAU,SAACC,GACrC,OAAOH,IAAMI,aAAaD,EAAO,CAAC5E,oBA/CrBkD,aElB1B4B,ECEE,SAAAvI,GAAmB,IAAjBwI,EAAiBxI,EAAjBwI,KAAMC,EAAWzI,EAAXyI,MACrB,OACIrJ,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,KACItJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAAKC,GAAG,KACHJ,GAELpJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAAKC,GAAG,KACHH,KCFII,6MACjB5D,WAAa,IAAIA,IAEjBC,MAAQ,CACJ4D,aAAc,KACd1D,OAAO,KAGXoC,eAAiB,SAACxF,GACdrC,EAAK2F,SAAS,CACVwD,aAAc9G,wFAMlBpC,KAAK0F,SAAS,CACVF,OAAO,qCAKX,GAAIxF,KAAKsF,MAAME,MACX,OAAOhG,EAAAC,EAAAC,cAACgH,EAAD,MAGX,IAAMS,EACF3H,EAAAC,EAAAC,cAACyJ,EAAD,CACIvB,eAAgB5H,KAAK4H,eACrBP,QAASrH,KAAKqF,WAAW7C,iBACzBiF,WAAY,SAAArH,GAAA,IAAE4D,EAAF5D,EAAE4D,KAAME,EAAR9D,EAAQ8D,OAAR,SAAAlD,OAAuBgD,EAAvB,MAAAhD,OAAgCkD,EAAhC,QAGdkF,EACF5J,EAAAC,EAAAC,cAAC2J,EAAD,CACAjB,OAAQpI,KAAKsF,MAAM4D,aACnB7B,QAASrH,KAAKqF,WAAWzC,cACrBpD,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,SAASR,MAAM,WAC5BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,OAAOR,MAAM,SAC1BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,OAAOR,MAAM,SAC1BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,UAAUR,MAAM,aAIrC,OACGhI,EAAAC,EAAAC,cAAC6J,EAAD,CAAUX,KAAMzB,EAAU0B,MAAOO,WA7CDrC,oBCF9ByC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA3J,EAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAwJ,GAAA,QAAAG,EAAAhI,UAAAiI,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAApI,UAAAoI,GAAA,OAAAhK,EAAAE,OAAA+J,EAAA,EAAA/J,CAAAD,MAAA0J,EAAAzJ,OAAAgK,EAAA,EAAAhK,CAAAuJ,IAAAU,KAAAxI,MAAAgI,EAAA,CAAA1J,MAAAgB,OAAA6I,MACIxE,WAAa,IAAIA,EADrBtF,EAGIuF,MAAQ,CACJ6E,aAAc,KACd3E,OAAO,GALfzF,EAQI6H,eAAiB,SAACxF,GACdrC,EAAK2F,SAAS,CACVyE,aAAc/H,KAV1BrC,EAAA,OAAAE,OAAAmK,EAAA,EAAAnK,CAAAuJ,EAAAC,GAAAxJ,OAAAoK,EAAA,EAAApK,CAAAuJ,EAAA,EAAA9B,IAAA,oBAAA4C,MAAA,WAgBQtK,KAAK0F,SAAS,CACVF,OAAO,MAjBnB,CAAAkC,IAAA,SAAA4C,MAAA,WAqBa,IAAAlD,EAAApH,KACL,OAAIA,KAAKsF,MAAME,MACJhG,EAAAC,EAAAC,cAACgH,EAAD,MAIPlH,EAAAC,EAAAC,cAACyJ,EAAD,CACAvB,eAAgB,SAACQ,GACbhB,EAAKf,MAAMkE,QAAQC,KAAKpC,IAE5Bf,QAASrH,KAAKqF,WAAWzD,YACzB6F,WAAY,SAAArH,GAAA,OAAAA,EAAE4D,YAhC1BwF,EAAA,CAA+BzC,aAoChB0D,cAAWjB,GCnCLkB,6MACjBrF,WAAa,IAAIA,IAEjBC,MAAQ,CACJqF,cAAe,KACfnF,OAAO,KAGXoC,eAAiB,SAACxF,GACdrC,EAAK2F,SAAS,CACViF,cAAevI,wFAKnBpC,KAAK0F,SAAS,CACVF,OAAO,qCAKX,GAAIxF,KAAKsF,MAAME,MACX,OAAOhG,EAAAC,EAAAC,cAACgH,EAAD,MAGX,IAAMS,EACF3H,EAAAC,EAAAC,cAACyJ,EAAD,CACIvB,eAAgB5H,KAAK4H,eACrBP,QAASrH,KAAKqF,WAAWnC,aACzBuE,WAAY,SAAArH,GAAA,OAAAA,EAAE4D,QAGhBoF,EACF5J,EAAAC,EAAAC,cAAC2J,EAAD,CACAjB,OAAQpI,KAAKsF,MAAMqF,cACnBtD,QAASrH,KAAKqF,WAAW/B,UACrB9D,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,SAASR,MAAM,WAC5BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,QAAQR,MAAM,UAC3BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,SAASR,MAAM,WAC5BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,mBAAmBR,MAAM,uBAI9C,OACGhI,EAAAC,EAAAC,cAAC6J,EAAD,CAAUX,KAAMzB,EAAU0B,MAAOO,WA5CJrC,aCHnB6D,6MACjBvF,WAAa,IAAIA,0EAGb,OACI7F,EAAAC,EAAAC,cAAC2J,EAAD,CACAjB,OAAQpI,KAAKqG,MAAMwE,OACnBxD,QAASrH,KAAKqF,WAAWpD,SACrBzC,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,gBAAgBR,MAAM,oBACnChI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,YAAYR,MAAM,cAC/BhI,EAAAC,EAAAC,cAAC4J,EAAD,CAAOtB,MAAM,WAAWR,MAAM,qBAVPT,aCFxB+D,oNCWXzF,WAAa,IAAIA,IAEjBC,MAAQ,CACJyF,gBAAgB,EAChBvF,OAAO,EACPmF,cAAe,MAWnBK,iBAAmB,WACfjL,EAAK2F,SAAS,SAACJ,GACX,MAAO,CACHyF,gBAAiBzF,EAAMyF,sGAV/BE,QAAQC,IAAI,SACZlL,KAAK0F,SAAS,CACVF,OAAO,qCAeX,IAAMzB,EAAO/D,KAAKsF,MAAMyF,eAAiBvL,EAAAC,EAAAC,cAACyL,EAAD,MAAgB,KAEzD,OAAInL,KAAKsF,MAAME,MACJhG,EAAAC,EAAAC,cAACgH,EAAD,MAIPlH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC0L,EAAA,EAAD,KACI5L,EAAAC,EAAAC,cAAC2L,EAAD,OAEJ7L,EAAAC,EAAAC,cAAC0L,EAAA,EAAD,KACI5L,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,KACItJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAAKuC,GAAI,CAACC,KAAM,EAAGC,OAAQ,IAC1BzH,EACDvE,EAAAC,EAAAC,cAAA,UACIC,UAAU,aACVgI,QAAS3H,KAAKgL,kBAFlB,6BAMJxL,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW,kBAAMnM,EAAAC,EAAAC,cAAA,gCAA4BkM,OAAK,IAClEpM,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAW1C,IACrCzJ,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWnC,EAAWoC,OAAK,IAEhDpM,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOC,KAAK,aAAaG,OAAQ,SAAAzL,GAAa,IACnCgC,EADmChC,EAAX0D,MACZgI,OAAZ1J,GACX,OAAO5C,EAAAC,EAAAC,cAACqM,EAAD,CAAWlB,OAAQzI,OAC1B5C,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWjB,cAxDxB3D,0BCNjCiF,IAASH,OAAOrM,EAAAC,EAAAC,cAACuM,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.57977ca1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.22389cf4.jpg\";","import Header from './header';\r\n\r\nexport default Header;","\r\nimport React from 'react';\r\nimport './header.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// Шапка страницы. \r\n// Ссылки кликабельны, открывают блоки без перезагрузки всей страницы\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h3 className=\"header-title\">\r\n                <Link to='/'>\r\n                Game of Thrones DB\r\n                </Link>\r\n            </h3>\r\n            <ul className=\"header-list\">\r\n                <li>\r\n                    <Link to='/characters/'>Characters</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/houses/'>Houses</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/books/'>Books</Link>   \r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n// link to='' для того чтобы работали сами ссылки -связываем с app.js\r\n// Link не перезагружает всю страницу в отличии от href","export default class GotService {\r\n\r\n    // основная ссылка на апи\r\n    constructor() {\r\n        this._apiBase = 'https://www.anapioficeandfire.com/api';\r\n    }\r\n\r\n    // основной запрос\r\n    getResource = async (url) => {\r\n        // возвращает результат асинхронной операции в res в формате json\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n    \r\n        // сообщение об ошибке получения данных\r\n        if (!res.ok) {\r\n          throw new Error(`Could not fetch ${url}` +\r\n            `, received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    // целевые запросы\r\n    getAllBooks = async () => {\r\n        const res = await this.getResource(`/books/`);\r\n        return res.map(this._transformBook);\r\n    }\r\n    \r\n    getBook = async (id) => {\r\n        const book = await this.getResource(`/books/${id}/`);\r\n        return this._transformBook(book);\r\n    }\r\n    \r\n    getAllCharacters = async () => {\r\n        const res = await this.getResource(`/characters?page=5&pageSize=10`);\r\n        return res.map(this._transformCharacter);\r\n    }\r\n    \r\n    getCharacter = async (id) => {\r\n        const character = await this.getResource(`/characters/${id}`);\r\n        return this._transformCharacter(character);\r\n    }\r\n    \r\n    getAllHouses = async () => {\r\n        const res = await this.getResource(`/houses/`);\r\n        return res.map(this._transformHouse);\r\n    }\r\n    \r\n    getHouse = async (id) => {\r\n        const house = await this.getResource(`/houses/${id}/`);\r\n        return this._transformHouse(house);\r\n    }\r\n\r\n    // значения по умолчанию, если в json нет каких-то данных\r\n    isSet(data) {\r\n        if (data) {\r\n            return data\r\n        } else {\r\n            return 'no data :('\r\n        }\r\n    }\r\n\r\n    // если ответ о т АПИ приходит в нестандартном формате - преобразовываем для правильной работы\r\n    _extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)$/;\r\n        return item.url.match(idRegExp)[1];\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            id: this._extractId(char),\r\n            name: this.isSet(char.name),\r\n            gender: this.isSet(char.gender),\r\n            born: this.isSet(char.born),\r\n            died: this.isSet(char.died), \r\n            culture: this.isSet(char.culture)\r\n        };\r\n    }\r\n\r\n    _transformHouse = (house) => {\r\n        return {\r\n            id: this._extractId(house),\r\n            name: this.isSet(house.name),\r\n            region: this.isSet(house.region),\r\n            words: this.isSet(house.words),\r\n            titles: this.isSet(house.titles),\r\n            ancestralWeapons: this.isSet(house.ancestralWeapons)\r\n        };\r\n    }\r\n    \r\n    _transformBook = (book) => {\r\n        return {\r\n            id: this._extractId(book),\r\n            name: this.isSet(book.name),\r\n            numberOfPages: this.isSet(book.numberOfPages),\r\n            publisher: this.isSet(book.publisher),\r\n            released: this.isSet(book.released)\r\n        };\r\n    }\r\n}","import Spinner from './spinner';\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-iqk7xosfbs\">\r\n        <div className=\"ldio-zemhvfyubme\">\r\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div></div>\r\n    ) \r\n}\r\n\r\nexport default Spinner;","import ErrorMessage from './errorMessage';\r\nexport default ErrorMessage;","\r\nimport React from 'react';\r\nimport './errorMessage.css';\r\nimport img from './error.jpg';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <>\r\n            <img src={img} alt='error'></img>\r\n            <span>Something goes wrong</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import React, {Component} from 'react';\r\nimport './randomChar.css';\r\nimport gotService from '../../services/gotService';\r\nimport Spinner from '../spinner';\r\nimport ErrorMessage from '../errorMessage';\r\n\r\n\r\n// Класс отрисовки рандомного персонажа\r\nexport default class RandomChar extends Component {\r\n\r\n    gotService = new gotService();\r\n\r\n    state = {\r\n        char: {},\r\n        loading: true,\r\n        error: false\r\n    }\r\n\r\n    // компонент появился на странице, персонаж меняется по таймеру. значение таймера в пропсе по умолчанию\r\n    componentDidMount() {\r\n        this.updateChar();\r\n        this.timerId = setInterval(this.updateChar, this.props.interval);\r\n    }\r\n\r\n    // компонент был удален со страницы через определенное время\r\n    // componentWillUnmount прекращает жизненный цикл компонента, когда блок пропадает из разметки и останавливает запросы к серверу\r\n    componentWillUnmount(){\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    // функция для прекращения работы спинера -> вывода карточки персонажа\r\n    onCharLoaded = (char) => {\r\n        this.setState({\r\n            char,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    // функция для отрисовки сообщения об ошибке\r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    // обновление персонажа\r\n    updateChar = () => {\r\n        // выбираем рандомный id\r\n        const id = Math.floor(Math.random()*140 + 25); //25-140\r\n        // делаем запрос к серверу\r\n        this.gotService.getCharacter(id)\r\n            .then(this.onCharLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    render() {\r\n        const { char, loading, error } = this.state;\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n        // вставляем в разметку один из 3х элементов\r\n        return (\r\n            <div className=\"random-block rounded\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// По умолчанию устанавливаем пропс - интервал в таймер\r\nRandomChar.defaultProps = {\r\n    interval: 15000\r\n}\r\n\r\n// проверка типа данных пропса. опционально\r\nRandomChar.propTypes = {\r\n    // проверяем чтобы интервал был задан только числовым значением\r\n    interval: (props, propName, componentName) => {\r\n        const value = props[propName];\r\n\r\n        if (typeof value === 'number' && !isNaN(value)) {\r\n            return null;\r\n        }\r\n        return new TypeError(`${componentName}: ${propName} must be a number`)\r\n    }\r\n}\r\n\r\n// разметка блока content - выводится сам персонаж. данные внутри меняются динамически\r\nconst View = ({char}) => {\r\n    const {name, gender, born, died, culture} = char;\r\n    return (\r\n        <>\r\n            <h4>Random Character: {name}</h4>\r\n            <ul className=\"list-group list-group-flush\">\r\n                <li className=\"list-group-item d-flex justify-content-between\">\r\n                    <span className=\"term\">Gender </span>\r\n                    <span>{gender}</span>\r\n                </li>\r\n                <li className=\"list-group-item d-flex justify-content-between\">\r\n                    <span className=\"term\">Born </span>\r\n                    <span>{born}</span>\r\n                </li>\r\n                <li className=\"list-group-item d-flex justify-content-between\">\r\n                    <span className=\"term\">Died </span>\r\n                    <span>{died}</span>\r\n                </li>\r\n                <li className=\"list-group-item d-flex justify-content-between\">\r\n                    <span className=\"term\">Culture </span>\r\n                    <span>{culture}</span>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    )\r\n}","import RandomChar from './randomChar';\r\n\r\nexport default RandomChar;","import ItemList from './itemList';\r\n\r\nexport default ItemList;","import React, {Component} from 'react';\r\nimport './itemList.css';\r\nimport Spinner from '../spinner';\r\n\r\n// Универсальный класс отрисовки карточек персонажей, книг, домов. \r\nexport default class ItemList extends Component {\r\n\r\n    state = {\r\n        itemList: null\r\n    }\r\n\r\n    // компонент появляется на странице -> выполняем запрос к серверу и устанавливаем state\r\n    //  передаются данные определенного пропса\r\n    componentDidMount() {\r\n        const {getData} = this.props;\r\n\r\n        // из pages, с верхнего уровня, передаеются передаются данные определенного пропса\r\n        getData()\r\n            .then( (itemList) => {\r\n                this.setState({\r\n                    itemList\r\n                })\r\n            })\r\n    }\r\n\r\n    // универсальный рендер компонента + универсальный слушатель на открытие определенного айтема \r\n    renderItems(arr) {\r\n        return arr.map((item) => {\r\n            const {id} = item;\r\n            const label = this.props.renderItem(item);\r\n\r\n            return (\r\n                <li \r\n                    key={id}\r\n                    className=\"list-group-item\"\r\n                    onClick={ () => this.props.onItemSelected(id)}>\r\n                    {label}\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {itemList} = this.state;\r\n\r\n        if (!itemList) {\r\n            return <Spinner/>\r\n        }\r\n\r\n        const items = this.renderItems(itemList);\r\n\r\n\r\n        return (\r\n            <ul className=\"item-list list-group\">\r\n                {items}\r\n            </ul>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './itemDetails.css';\r\n\r\n\r\n// универсальное поле вывода данных\r\nconst Field = ({item, field, label}) => {\r\n    // item - объект, field - хар-ки объекта, label - данные с сервера\r\n    return (\r\n        <li className=\"list-group-item d-flex justify-content-between\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{item[field]}</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport {\r\n    Field\r\n};\r\n\r\nexport default class ItemDetails extends Component {\r\n\r\n    state = {\r\n        item: null\r\n    }\r\n\r\n    // компонент появился на странице\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n    \r\n    // компонент обновился \r\n    componentDidUpdate(prevProps) {\r\n        // если id компонента не совпадает с id предыдущего\r\n        if (this.props.itemId !== prevProps.itemId) {\r\n            // обновляем айтем\r\n            this.updateItem();\r\n        }\r\n    }\r\n\r\n    // пропсы определенного айтема приходят из вышестоящих классов (страниц)\r\n    updateItem() {\r\n        const {itemId, getData} = this.props;\r\n        if (!itemId) {\r\n            return;\r\n        }\r\n\r\n        getData(itemId)\r\n            .then((item) => {\r\n                this.setState({item})\r\n            })\r\n    }\r\n\r\n    render() {\r\n        // если айтем не выбран\r\n        if (!this.state.item) {\r\n            return <span className='select-error'>Please select item in the list</span>\r\n        }\r\n        const {item} = this.state;\r\n        const {name} = item;\r\n\r\n        return (\r\n            <div className=\"char-details rounded\">\r\n                <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {\r\n                        React.Children.map(this.props.children, (child) => {\r\n                            return React.cloneElement(child, {item})\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}","import ItemDetails, {Field} from './itemDetails';\r\nexport default ItemDetails;\r\nexport {Field};","import RowBlock from './rowBlock';\r\nexport default RowBlock;","import React from 'react';\r\nimport {Col, Row} from 'reactstrap';\r\n\r\nconst RowBlock = ({left, right}) => {\r\n    return (\r\n        <Row>\r\n            <Col md='6'>\r\n                {left}\r\n            </Col>\r\n            <Col md='6'>\r\n                {right}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default RowBlock;","import React, {Component} from 'react';\r\nimport ItemList from '../itemList';\r\nimport ItemDetails, {Field} from '../itemDetails';\r\nimport ErrorMessage from '../errorMessage';\r\nimport gotService from '../../services/gotService';\r\nimport RowBlock from '../rowBlock';\r\n\r\n\r\nexport default class CharacterPage extends Component {\r\n    gotService = new gotService();\r\n\r\n    state = {\r\n        selectedChar: null,\r\n        error: false\r\n    }\r\n\r\n    onItemSelected = (id) => {\r\n        this.setState({\r\n            selectedChar: id\r\n        })\r\n    }\r\n\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        const itemList = (\r\n            <ItemList \r\n                onItemSelected={this.onItemSelected}\r\n                getData={this.gotService.getAllCharacters}\r\n                renderItem={({name, gender}) => `${name} (${gender})`}/>\r\n        )\r\n\r\n        const itemDetails = (\r\n            <ItemDetails\r\n            itemId={this.state.selectedChar}\r\n            getData={this.gotService.getCharacter} >\r\n                <Field field='gender' label='Gender'/>\r\n                <Field field='born' label='Born'/>\r\n                <Field field='died' label='Died'/>\r\n                <Field field='culture' label='Culture'/>\r\n            </ItemDetails>\r\n        )\r\n\r\n        return (\r\n           <RowBlock left={itemList} right={itemDetails} />\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport ItemList from '../itemList';\r\nimport ErrorMessage from '../errorMessage';\r\nimport gotService from '../../services/gotService';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nexport class BooksPage extends Component {\r\n    gotService = new gotService();\r\n\r\n    state = {\r\n        selectedBook: null,\r\n        error: false\r\n    }\r\n\r\n    onItemSelected = (id) => {\r\n        this.setState({\r\n            selectedBook: id\r\n        })\r\n    }\r\n\r\n    // компонент ошибки\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return (\r\n            <ItemList \r\n            onItemSelected={(itemId) => {\r\n                this.props.history.push(itemId)\r\n            }}\r\n            getData={this.gotService.getAllBooks}\r\n            renderItem={({name}) => name}/>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(BooksPage);","import React, {Component} from 'react';\r\nimport ItemList from '../itemList';\r\nimport ItemDetails, {Field} from '../itemDetails';\r\nimport ErrorMessage from '../errorMessage';\r\nimport gotService from '../../services/gotService';\r\nimport RowBlock from '../rowBlock';\r\n\r\nexport default class HousesPage extends Component {\r\n    gotService = new gotService();\r\n\r\n    state = {\r\n        selectedHouse: null,\r\n        error: false\r\n    }\r\n\r\n    onItemSelected = (id) => {\r\n        this.setState({\r\n            selectedHouse: id\r\n        })\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        const itemList = (\r\n            <ItemList \r\n                onItemSelected={this.onItemSelected}\r\n                getData={this.gotService.getAllHouses}\r\n                renderItem={({name}) => name}/>\r\n        )\r\n\r\n        const itemDetails = (\r\n            <ItemDetails\r\n            itemId={this.state.selectedHouse}\r\n            getData={this.gotService.getHouse} >\r\n                <Field field='region' label='Region'/>\r\n                <Field field='words' label='Words'/>\r\n                <Field field='titles' label='Titles'/>\r\n                <Field field='ancestralWeapons' label='Ancestral Weapons'/>\r\n            </ItemDetails>\r\n        )\r\n\r\n        return (\r\n           <RowBlock left={itemList} right={itemDetails} />\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport gotService from '../../services/gotService';\r\nimport ItemDetails, {Field} from '../itemDetails';\r\n\r\nexport default class BooksItem extends Component {\r\n    gotService = new gotService();\r\n\r\n    render () {\r\n        return (\r\n            <ItemDetails\r\n            itemId={this.props.bookId}\r\n            getData={this.gotService.getBook} >\r\n                <Field field='numberOfPages' label='Number of pages'/>\r\n                <Field field='publisher' label='Publisher'/>\r\n                <Field field='released' label='Released'/>\r\n            </ItemDetails>\r\n        )\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport {Col, Row, Container} from 'reactstrap';\r\nimport Header from '../header';\r\nimport RandomChar from '../randomChar';\r\nimport ErrorMessage from '../errorMessage';\r\nimport {CharacterPage, BooksPage, HousesPage, BooksItem} from '../pages';\r\nimport gotService from '../../services/gotService';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport './app.css';\r\n\r\n// основной блок\r\nexport default class App extends Component {\r\n    gotService = new gotService();\r\n\r\n    state = {\r\n        showRandomChar: true,\r\n        error: false,\r\n        selectedHouse: 20\r\n    };\r\n\r\n    componentDidCatch() {\r\n        console.log('error');\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    // функция скрытия блока с рандомным персонажем\r\n    toggleRandomChar = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                showRandomChar: !state.showRandomChar\r\n            }\r\n        });\r\n    };\r\n\r\n    // общий рендер нашего SPA\r\n    render() {\r\n        const char = this.state.showRandomChar ? <RandomChar/> : null;\r\n\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return (\r\n            <Router> \r\n                <div className='app'>\r\n                    <Container>\r\n                        <Header />\r\n                    </Container>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col lg={{size: 5, offset: 0}}>\r\n                            {char}\r\n                            <button \r\n                                className=\"toggle-btn\"\r\n                                onClick={this.toggleRandomChar}>Toggle random character</button>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* exact - для использования на определенной странице */}\r\n                        <Route path='/' component={() => <h1>Welcome to GOT DB</h1>} exact/>\r\n                        <Route path='/characters' component={CharacterPage} />\r\n                        <Route path='/books' component={BooksPage} exact/>\r\n                        {/* назначаем путь для определенной книги */}\r\n                        <Route path='/books/:id' render={({match}) => {\r\n                            const {id} = match.params;\r\n                        return <BooksItem bookId={id}/>}}/>\r\n                        <Route path='/houses' component={HousesPage} />\r\n                    </Container>\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n\r\n};\r\n\r\n// для того чтобы работала навигация по элементам, оборачиваем в Router\r\n// в Route непосредственно передаются url-адреса","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}